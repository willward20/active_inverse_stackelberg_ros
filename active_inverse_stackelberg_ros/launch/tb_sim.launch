    <launch>

        <!-- Add node name to console output to identify which node is talking -->
        <env name="ROSCONSOLE_FORMAT" value="[${severity}] [${time}] [${node}]: ${message}"/>

        <!-- Use simulation time in gazebo instead of actual time -->
        <param name="/use_sim_time" value="true"/>

        <!-- Model names of the robots -->
        <arg name="model" default="burger" doc="model type [burger, waffle, waffle_pi]"/>
        <arg name="tb1"    default="agent1"/>
        <arg name="tb2"    default="agent2"/>
        <arg name="tb3"    default="agent3"/>

        <!-- Global node parameters -->
        <arg name="SIM_MOCAP_UPDATE_FREQ"  default="100.0"/>
        <arg name="CONTROLLER_CYCLE_RATE"  default="1.0"/>   
        <arg name="K_X"  default="1.0"/>
        <arg name="K_Y"  default="1.0"/>
        <arg name="K_THETA"  default="1.0"/>     

        <!-- Launch nodes for tb1 -->
        <group ns = "$(arg bot1)">

            <!-- Start gazebo motion capture simulation, with parameters for this node -->
            <node pkg="ros_sockets" type="gazebo_tracker" name="gazebo_tracker"  output="screen">
                <param name="tracker_name" value="vrpn_client_node/$(arg bot1)" type="str" />
                <param name="model_name" value="turtlebot3_burger" type="str" />
                <param name="update_frequency" value="$(arg SIM_MOCAP_UPDATE_FREQ)" type="double" />
            </node>

            <!-- start the state feedback server -->
            <node pkg="ros_sockets" type="state_feedback" name="state_feedback" output="screen">
                <param name="tracker_name" value="vrpn_client_node/$(arg bot1)" type="str" />
                <param name="port" value="42422" type="int" />
            </node>

            <!-- start the experiment time server (for synchronization)  -->
            <node pkg="ros_sockets" type="experiment_time" name="experiment_time" output="screen">
                <param name="port" value="42423" type="int" />
            </node>

            <!-- start the rollout data server -->
            <node pkg="jetracer_racing_ros" type="rollout_data" name="rollout_data" output="screen">
                <param name="port" value="42425" type="int" />
            </node>

            <group ns = "ts">
                <node pkg="ros_sockets" type="array_publisher" name="array_publisher" output="screen">
                    <param name="port" value="42426" type="int" />
                    <param name="topic_name" value="ts" type="str" />
                </node>
            </group>
            <group ns = "coeffs_x">
                <node pkg="ros_sockets" type="array_publisher" name="array_publisher" output="screen">
                    <param name="port" value="42427" type="int" />
                    <param name="topic_name" value="coeffs_x" type="str" />
                </node>
            </group>
            <group ns = "coeffs_y">
                <node pkg="ros_sockets" type="array_publisher" name="array_publisher" output="screen">
                    <param name="port" value="42428" type="int" />
                    <param name="topic_name" value="coeffs_y" type="str" />
                </node>
            </group>

            <!-- Start the trajectory generator -->
            <node pkg="jetracer_racing_ros" type="trajectory_generator" name="trajectory_generator"  output="screen" />

            <!-- Start the controller -->
            <node pkg="jetracer_racing_ros" type="controller" name="controller"  output="screen">
                <param name="cycle_rate" value="$(CONTROLLER_CYCLE_RATE)" type="double" />
                <param name="Kx" value="$(K_X)" type="double" />
                <param name="Ky" value="$(K_Y)" type="double" />
                <param name="Ktheta" value="$(K_THETA)" type="double" />
            </node>

        </group>



    </launch>
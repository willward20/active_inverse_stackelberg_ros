<launch>
    <!-- Model names of the robots -->
    <arg name="model" default="burger" doc="model type [burger, waffle, waffle_pi]"/>
    <arg name="bot1"  default="tb1"/>
    <arg name="bot2" default="tb2"/>
    <arg name="bot3"  default="tb3"/>

    <!-- Initial positions of the robots -->
    <arg name="bot1_x_pos" default="-0.25"/>
    <arg name="bot1_y_pos" default="0.0"/>
    <arg name="bot1_z_pos" default=" 0.0"/>
    <arg name="bot1_yaw"   default=" 1.57"/>

    <arg name="bot2_x_pos" default="0.0"/>
    <arg name="bot2_y_pos" default="0.0"/>
    <arg name="bot2_z_pos" default=" 0.0"/>
    <arg name="bot2_yaw"   default=" 1.57"/>

    <arg name="bot3_x_pos" default=" 0.25"/>
    <arg name="bot3_y_pos" default=" 0.0"/>
    <arg name="bot3_z_pos" default=" 0.0"/>
    <arg name="bot3_yaw"   default=" 1.57"/>

    <!-- Start gazebo and spawn robots -->
    <include file="$(find gazebo_ros)/launch/empty_world.launch">
        <arg name="world_name" value="$(find active_inverse_stackelberg_ros)/worlds/tb_sim.world"/>
        <arg name="paused" value="false"/>
        <arg name="use_sim_time" value="true"/>
        <arg name="gui" value="true"/>
        <arg name="headless" value="false"/>
        <arg name="debug" value="false"/>
    </include>  

    <group ns = "$(arg bot1)">
        <param name="robot_description" command="$(find xacro)/xacro --inorder $(find active_inverse_stackelberg_ros)/urdf/turtlebot3_$(arg model).urdf.xacro chassis_color:=Blue" />    
        <node name="spawn_urdf" pkg="gazebo_ros" type="spawn_model" args="-urdf -model $(arg bot1) -x $(arg bot1_x_pos) -y $(arg bot1_y_pos) -z $(arg bot1_z_pos) -Y $(arg bot1_yaw) -param robot_description" />
    </group>

    <group ns = "$(arg bot2)">
        <param name="robot_description" command="$(find xacro)/xacro --inorder $(find active_inverse_stackelberg_ros)/urdf/turtlebot3_$(arg model).urdf.xacro chassis_color:=Green" />
        <node name="spawn_urdf" pkg="gazebo_ros" type="spawn_model" args="-urdf -model $(arg bot2) -x $(arg bot2_x_pos) -y $(arg bot2_y_pos) -z $(arg bot2_z_pos) -Y $(arg bot2_yaw) -param robot_description" />
    </group>

    <group ns = "$(arg bot3)">
        <param name="robot_description" command="$(find xacro)/xacro --inorder $(find active_inverse_stackelberg_ros)/urdf/turtlebot3_$(arg model).urdf.xacro chassis_color:=Red" />
        <node name="spawn_urdf" pkg="gazebo_ros" type="spawn_model" args="-urdf -model $(arg bot3) -x $(arg bot3_x_pos) -y $(arg bot3_y_pos) -z $(arg bot3_z_pos) -Y $(arg bot3_yaw) -param robot_description" />
    </group>

    <!-- Add node name to console output to identify which node is talking -->
    <env name="ROSCONSOLE_FORMAT" value="[${severity}] [${time}] [${node}]: ${message}"/>

    <!-- Use simulation time in gazebo instead of actual time -->
    <param name="/use_sim_time" value="true"/>

    <!-- Global node parameters -->
    <arg name="SIM_MOCAP_UPDATE_FREQ"  default="100.0"/>
    <arg name="CONTROLLER_CYCLE_RATE"  default="10.0"/>   
    <arg name="K_X"  default="1.0"/>
    <arg name="K_Y"  default="1.0"/>
    <arg name="K_THETA"  default="3.0"/>     

    <!-- start the experiment time server (for synchronization)  -->
    <node pkg="ros_sockets" type="experiment_time" name="experiment_time" output="screen">
        <param name="port" value="50011" type="int" />
    </node>

    <!-- Launch nodes for tb1 -->
    <group ns = "$(arg bot1)">
        <!-- Start gazebo motion capture simulation, with parameters for this node -->
        <node pkg="ros_sockets" type="gazebo_tracker" name="gazebo_tracker"  output="screen">
            <param name="tracker_name" value="vrpn_client_node/$(arg bot1)" type="str" />
            <param name="model_name" value="$(arg bot1)" type="str" />
            <param name="update_frequency" value="$(arg SIM_MOCAP_UPDATE_FREQ)" type="double" />
        </node>

        <!-- start the state feedback server -->
        <node pkg="ros_sockets" type="state_feedback" name="state_feedback" output="screen">
            <param name="tracker_name" value="vrpn_client_node/$(arg bot1)" type="str" />
            <param name="port" value="50010" type="int" />
        </node>

        <!-- start the rollout data server -->
        <node pkg="ros_sockets" type="rollout_data" name="rollout_data" output="screen">
            <param name="port" value="50012" type="int" />
        </node>

        <!-- start spline servers -->
        <group ns = "ts">
            <node pkg="ros_sockets" type="array_publisher" name="array_publisher" output="screen">
                <param name="port" value="50013" type="int" />
                <param name="topic_name" value="ts" type="str" />
            </node>
        </group>
        <group ns = "coeffs_x">
            <node pkg="ros_sockets" type="array_publisher" name="array_publisher" output="screen">
                <param name="port" value="50014" type="int" />
                <param name="topic_name" value="coeffs_x" type="str" />
            </node>
        </group>
        <group ns = "coeffs_y">
            <node pkg="ros_sockets" type="array_publisher" name="array_publisher" output="screen">
                <param name="port" value="50015" type="int" />
                <param name="topic_name" value="coeffs_y" type="str" />
            </node>
        </group>

        <!-- Start the trajectory generator -->
        <node pkg="active_inverse_stackelberg_ros" type="trajectory_generator" name="trajectory_generator"  output="screen" />

        <!-- Start the controller -->
        <node pkg="active_inverse_stackelberg_ros" type="controller" name="controller"  output="screen">
            <param name="cycle_rate" value="$(arg CONTROLLER_CYCLE_RATE)" type="double" />
            <param name="Kx" value="$(arg K_X)" type="double" />
            <param name="Ky" value="$(arg K_Y)" type="double" />
            <param name="Ktheta" value="$(arg K_THETA)" type="double" />
            <param name="tracker_name" value="$(arg bot1)" type="str" />
        </node>
    </group>

    <!-- Launch nodes for tb2 -->
    <group ns = "$(arg bot2)">
        <!-- Start gazebo motion capture simulation, with parameters for this node -->
        <node pkg="ros_sockets" type="gazebo_tracker" name="gazebo_tracker"  output="screen">
            <param name="tracker_name" value="vrpn_client_node/$(arg bot2)" type="str" />
            <param name="model_name" value="$(arg bot2)" type="str" />
            <param name="update_frequency" value="$(arg SIM_MOCAP_UPDATE_FREQ)" type="double" />
        </node>

        <!-- start the state feedback server -->
        <node pkg="ros_sockets" type="state_feedback" name="state_feedback" output="screen">
            <param name="tracker_name" value="vrpn_client_node/$(arg bot2)" type="str" />
            <param name="port" value="50020" type="int" />
        </node>

        <!-- start the rollout data server -->
        <node pkg="ros_sockets" type="rollout_data" name="rollout_data" output="screen">
            <param name="port" value="50022" type="int" />
        </node>

        <!-- start spline servers -->
        <group ns = "ts">
            <node pkg="ros_sockets" type="array_publisher" name="array_publisher" output="screen">
                <param name="port" value="50023" type="int" />
                <param name="topic_name" value="ts" type="str" />
            </node>
        </group>
        <group ns = "coeffs_x">
            <node pkg="ros_sockets" type="array_publisher" name="array_publisher" output="screen">
                <param name="port" value="50024" type="int" />
                <param name="topic_name" value="coeffs_x" type="str" />
            </node>
        </group>
        <group ns = "coeffs_y">
            <node pkg="ros_sockets" type="array_publisher" name="array_publisher" output="screen">
                <param name="port" value="50025" type="int" />
                <param name="topic_name" value="coeffs_y" type="str" />
            </node>
        </group>

        <!-- Start the trajectory generator -->
        <node pkg="active_inverse_stackelberg_ros" type="trajectory_generator" name="trajectory_generator"  output="screen" />

        <!-- Start the controller -->
        <node pkg="active_inverse_stackelberg_ros" type="controller" name="controller"  output="screen">
            <param name="cycle_rate" value="$(arg CONTROLLER_CYCLE_RATE)" type="double" />
            <param name="Kx" value="$(arg K_X)" type="double" />
            <param name="Ky" value="$(arg K_Y)" type="double" />
            <param name="Ktheta" value="$(arg K_THETA)" type="double" />
            <param name="tracker_name" value="$(arg bot2)" type="str" />
        </node>
    </group>

    <!-- Launch nodes for tb3 -->
    <group ns = "$(arg bot3)">
        <!-- Start gazebo motion capture simulation, with parameters for this node -->
        <node pkg="ros_sockets" type="gazebo_tracker" name="gazebo_tracker"  output="screen">
            <param name="tracker_name" value="vrpn_client_node/$(arg bot3)" type="str" />
            <param name="model_name" value="$(arg bot3)" type="str" />
            <param name="update_frequency" value="$(arg SIM_MOCAP_UPDATE_FREQ)" type="double" />
        </node>

        <!-- start the state feedback server -->
        <node pkg="ros_sockets" type="state_feedback" name="state_feedback" output="screen">
            <param name="tracker_name" value="vrpn_client_node/$(arg bot3)" type="str" />
            <param name="port" value="50030" type="int" />
        </node>

        <!-- start the rollout data server -->
        <node pkg="ros_sockets" type="rollout_data" name="rollout_data" output="screen">
            <param name="port" value="50032" type="int" />
        </node>

        <!-- start spline servers -->
        <group ns = "ts">
            <node pkg="ros_sockets" type="array_publisher" name="array_publisher" output="screen">
                <param name="port" value="50033" type="int" />
                <param name="topic_name" value="ts" type="str" />
            </node>
        </group>
        <group ns = "coeffs_x">
            <node pkg="ros_sockets" type="array_publisher" name="array_publisher" output="screen">
                <param name="port" value="50034" type="int" />
                <param name="topic_name" value="coeffs_x" type="str" />
            </node>
        </group>
        <group ns = "coeffs_y">
            <node pkg="ros_sockets" type="array_publisher" name="array_publisher" output="screen">
                <param name="port" value="50035" type="int" />
                <param name="topic_name" value="coeffs_y" type="str" />
            </node>
        </group>

        <!-- Start the trajectory generator -->
        <node pkg="active_inverse_stackelberg_ros" type="trajectory_generator" name="trajectory_generator"  output="screen" />

        <!-- Start the controller -->
        <node pkg="active_inverse_stackelberg_ros" type="controller" name="controller"  output="screen">
            <param name="cycle_rate" value="$(arg CONTROLLER_CYCLE_RATE)" type="double" />
            <param name="Kx" value="$(arg K_X)" type="double" />
            <param name="Ky" value="$(arg K_Y)" type="double" />
            <param name="Ktheta" value="$(arg K_THETA)" type="double" />
            <param name="tracker_name" value="$(arg bot3)" type="str" />
        </node>
    </group>

</launch>